version: '3.8'

services:
  # Trading Bot Engine
  trading-engine:
    build: .
    container_name: trading-engine
    restart: unless-stopped
    environment:
      # Exchange configuration
      - EXCHANGE_CHOICE=okx
      
      # Trading parameters
      - LEVERAGE=10
      - RISK_PER_TRADE=0.05
      - MIN_SIGNAL_STRENGTH=0.3
      - STOP_LOSS_PCT=0.02
      - TAKE_PROFIT_PCT=0.04
      
      # OKX API credentials (set these in .env file)
      - OKX_API_KEY=${OKX_API_KEY}
      - OKX_API_SECRET=${OKX_API_SECRET}
      - OKX_PASSPHRASE=${OKX_PASSPHRASE}
      
      # Database
      - DATABASE_URL=postgresql://trading_user:trading_pass@postgres:5432/trading_bot
      - REDIS_URL=redis://redis:6379/0
      
      # Optional settings
      - MIN_BALANCE_THRESHOLD=50.0
      - DAILY_MAX_LOSS_PCT=0.05
      - TRADING_INTERVAL=60
      - LOG_LEVEL=INFO
      
    volumes:
      # Mount logs directory for persistence
      - ./logs:/app/logs
      
      # Mount models directory (if you want to update models without rebuilding)
      - ./models:/app/models
      
    env_file:
      - .env
      
    networks:
      - trading-network
      
    depends_on:
      - postgres
      - redis
      
    # Health check
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Web API Backend
  trading-api:
    build: .
    container_name: trading-api
    restart: unless-stopped
    command: ["uvicorn", "api.main:app", "--host", "0.0.0.0", "--port", "8000"]
    environment:
      - DATABASE_URL=postgresql://trading_user:trading_pass@postgres:5432/trading_bot
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - OKX_API_KEY=${OKX_API_KEY}
      - OKX_API_SECRET=${OKX_API_SECRET}
      - OKX_PASSPHRASE=${OKX_PASSPHRASE}
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models
    env_file:
      - .env
    networks:
      - trading-network
    depends_on:
      - postgres
      - redis

  # Background Task Worker (Model Training)
  trading-worker:
    build: .
    container_name: trading-worker
    restart: unless-stopped
    command: ["celery", "-A", "worker.celery_app", "worker", "--loglevel=info"]
    environment:
      - DATABASE_URL=postgresql://trading_user:trading_pass@postgres:5432/trading_bot
      - REDIS_URL=redis://redis:6379/0
      - OKX_API_KEY=${OKX_API_KEY}
      - OKX_API_SECRET=${OKX_API_SECRET}
      - OKX_PASSPHRASE=${OKX_PASSPHRASE}
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models
    env_file:
      - .env
    networks:
      - trading-network
    depends_on:
      - postgres
      - redis

  # Web Dashboard (React/Vue)
  trading-dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    container_name: trading-dashboard
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    networks:
      - trading-network
    depends_on:
      - trading-api

  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: trading-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=trading_bot
      - POSTGRES_USER=trading_user
      - POSTGRES_PASSWORD=trading_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - trading-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: trading-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - trading-network

  # Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: trading-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - trading-network

  grafana:
    image: grafana/grafana:latest
    container_name: trading-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - trading-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  trading-network:
    driver: bridge
